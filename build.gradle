/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

buildscript {
    String pluginRootGroupId = project.ext.pluginRootGroupId = "name.remal.gradle-plugins.${rootProject.name}"
    String pluginRootArtifactId = project.ext.pluginRootArtifactId = rootProject.name
    String pluginRootSnapshotVersion = project.ext.pluginRootSnapshotVersion = '2-SNAPSHOT'
    dependencies {
        //classpath("$pluginRootGroupId:$pluginRootArtifactId:$pluginRootSnapshotVersion") { version { strictly(pluginRootSnapshotVersion) } }
        classpath 'name.remal.gradle-plugins.toolkit:build-logic:0.36.1'
    }
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

allprojects {
    group = project.pluginRootGroupId
    version = project.pluginRootSnapshotVersion
}

apply plugin: 'name.remal.toolkit.build-logic'

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

apply plugin: 'java-gradle-plugin'
apply plugin: 'name.remal.generate-sources'

dependencies {
    relocateClasses 'com.google.guava:guava'
}

gradlePlugin {
    plugins {
        'name.remal.lombok' {
            id = 'name.remal.lombok'
            implementationClass = 'name.remal.gradleplugins.lombok.LombokPlugin'
            displayName = 'Configure Lombok annotation processor'
            description = property('repository-description')
        }
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

Configuration lombokArtifactsToDownloadForBuildCacheConf = project.configurations.create('lombokArtifactsToDownloadForBuildCache')

Closure<Configuration> createLombokArtifactsConfiguration = { String name, boolean addToIndirectApi = true, Closure configurer = {} ->
    return project.configurations.create(name) { Configuration conf ->
        conf.transitive = false
        conf.extendsFrom = []
        conf.dependencies.all { Dependency dep ->
            if (lombokArtifactsToDownloadForBuildCacheConf.state == Configuration.State.UNRESOLVED) {
                lombokArtifactsToDownloadForBuildCacheConf.dependencies.add(dep.copy())
            }
            if (dep instanceof ModuleDependency) {
                dep.transitive = false
            }
            if (dep instanceof ExternalDependency) {
                dep.version { strictly(dep.version) }
            }
        }

        if (addToIndirectApi) {
            project.configurations.indirectApi.extendsFrom(conf)
        }

        configurer(conf)
    }
}

createLombokArtifactsConfiguration('lombokCoreArtifacts')
createLombokArtifactsConfiguration('lombokAddonsArtifacts', false)

dependencies {
    lombokCoreArtifacts 'org.projectlombok:lombok:1.18.24'
    lombokCoreArtifacts 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    lombokAddonsArtifacts 'com.github.spotbugs:spotbugs-annotations:4.7.3'
    lombokAddonsArtifacts 'com.fasterxml.jackson.core:jackson-databind:2.13.4.2'
}

createLombokArtifactsConfiguration('lombokSources', false) { Configuration conf ->
    conf.defaultDependencies { deps ->
        Dependency lombokDep = configurations.lombokCoreArtifacts.dependencies
            .find { "${it.group}:${it.name}" == 'org.projectlombok:lombok' }
        if (lombokDep == null) throw new GradleException("Lombok dependency can't be found")
        Dependency dep = project.dependencies.create("${lombokDep.group}:${lombokDep.name}:${lombokDep.version}:sources")
        deps.add(dep)
    }
}

apply from: 'build-generate-LombokDependencies.gradle'
apply from: 'build-generate-LombokConfigurationKeys.gradle'
