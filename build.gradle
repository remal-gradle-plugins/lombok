/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

buildscript {
    String rootGroupId = project.ext.rootGroupId = "name.remal.gradle-plugins.${rootProject.name}"
    String rootArtifactId = project.ext.rootArtifactId = rootProject.name
    String rootSnapshotVersion = project.ext.rootSnapshotVersion = '2-SNAPSHOT'
    dependencies {
        //classpath("$rootGroupId:$rootArtifactId:$rootSnapshotVersion") { version { strictly(rootSnapshotVersion) } }
        classpath 'name.remal.gradle-plugins.toolkit:build-logic:0.58.1'
    }
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

allprojects {
    group = project.rootGroupId
    version = project.rootSnapshotVersion
}

apply plugin: 'name.remal.toolkit.build-logic'

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

apply plugin: 'java-gradle-plugin'
apply plugin: 'name.remal.generate-sources'

dependencies {
    relocateClasses 'com.google.guava:guava'


    testImplementation 'com.google.jimfs:jimfs:1.2'
}

gradlePlugin {
    plugins {
        'name.remal.lombok' {
            id = 'name.remal.lombok'
            implementationClass = 'name.remal.gradle_plugins.lombok.LombokPlugin'
            displayName = 'Configure Lombok annotation processor'
            description = property('repository-description')
        }
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

Configuration artifactsToDownloadForBuildCacheConf = project.configurations.create('artifactsToDownloadForBuildCache')

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

Closure<Configuration> createLombokArtifactsConfiguration = { String name, boolean addToIndirectApi = true, Closure configurer = {} ->
    return project.configurations.create(name) { Configuration conf ->
        conf.transitive = false
        conf.extendsFrom = []
        conf.dependencies.all { Dependency dep ->
            if (dep instanceof ExternalDependency) {
                dep.version { strictly(dep.version) }
            }
            if (artifactsToDownloadForBuildCacheConf.state == Configuration.State.UNRESOLVED) {
                artifactsToDownloadForBuildCacheConf.dependencies.add(dep.copy())
            }
            if (dep instanceof ModuleDependency) {
                dep.transitive = false
            }
        }

        if (addToIndirectApi) {
            project.configurations.indirectApi.extendsFrom(conf)
        }

        configurer(conf)
    }
}

createLombokArtifactsConfiguration('lombokCoreArtifacts')
createLombokArtifactsConfiguration('lombokAddonsArtifacts', false)

dependencies {
    lombokCoreArtifacts 'org.projectlombok:lombok:1.18.28'
    lombokCoreArtifacts 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
}

Closure<ExternalModuleDependency> getLombokDependency = {
    Dependency lombokDep = (ExternalModuleDependency) configurations.lombokCoreArtifacts.dependencies
        .find { "${it.group}:${it.name}" == 'org.projectlombok:lombok' }
    if (lombokDep == null) throw new GradleException("Lombok dependency can't be found")
    return (ExternalModuleDependency) lombokDep
}
Closure<ExternalModuleDependency> getLombokMapStructBindingDependency = {
    Dependency lombokDep = (ExternalModuleDependency) configurations.lombokCoreArtifacts.dependencies
        .find { "${it.group}:${it.name}" == 'org.projectlombok:lombok-mapstruct-binding' }
    if (lombokDep == null) throw new GradleException("Lombok MapStruct binding dependency can't be found")
    return (ExternalModuleDependency) lombokDep
}

createLombokArtifactsConfiguration('lombokSources', false) { Configuration conf ->
    conf.defaultDependencies { deps ->
        ExternalModuleDependency lombokDep = getLombokDependency()
        Dependency dep = project.dependencies.create("${lombokDep.group}:${lombokDep.name}:${lombokDep.version}:sources")
        deps.add(dep)
    }
}

apply from: 'build-generate-LombokDependencies.gradle'
apply from: 'build-generate-LombokConfigurationKeys.gradle'

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

createLombokArtifactsConfiguration('librariesToTestCompatibility', false)

dependencies {
    librariesToTestCompatibility 'org.mapstruct:mapstruct:1.5.5.Final'
    librariesToTestCompatibility 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    librariesToTestCompatibility 'io.micronaut:micronaut-inject-java:3.9.2'
    librariesToTestCompatibility 'io.micronaut:micronaut-validation:3.9.2'
}

apply from: 'build-generate-LibrariesToTestCompatibility.gradle'

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

tasks.named('generateJava') { Task task ->
    String repositoryHtmlUrl = project.ext['repository-html-url']
    inputs.property('repository-html-url', repositoryHtmlUrl)
    classFile("${project.calculateBaseJavaPackage()}.config.rule", 'DocUtils') {
        it.writePackage()
        it.println("")
        it.writeStaticImport("lombok.AccessLevel", "PRIVATE")
        it.println("")
        it.writeImport("lombok.NoArgsConstructor")
        it.println("")
        it.println("@NoArgsConstructor(access = PRIVATE)")
        it.writeBlock("abstract class ${it.simpleName}") {
            it.println("public static final String PLUGIN_REPOSITORY_HTML_URL = \"${it.escapeJava(repositoryHtmlUrl)}\";")
        }
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

tasks.processReadme.readmeFileProcessors.add(
    { File readmeFile ->
        ExternalModuleDependency lombokDep = getLombokDependency()
        ExternalModuleDependency lombokMapStructBindingDep = getLombokMapStructBindingDependency()

        String content = readmeFile.getText('UTF-8')

        [lombokDep, lombokMapStructBindingDep].forEach { dep ->
            content = content.replaceAll(
                "\\Q${dep.group}\\E([:/])\\Q${dep.name}\\E\\1\\d+(.\\d+)*"
            ) {
                String delim = it[1]
                String notation = "${dep.group}${delim}${dep.name}${delim}${dep.version}"
                logger.lifecycle('  Handling {}', notation)
                return notation
            }
        }

        content = content.replaceAll(
            /(lombokVersion\s*=\s*(['"]))(?:(?!\2).)*\2/
        ) {
            String prefix = it[1]
            String quote = it[2]
            String replacement = "${prefix}${lombokDep.version}${quote}"
            logger.lifecycle('  Handling {}', replacement)
            return replacement
        }

        readmeFile.setText(content, 'UTF-8')
    }
)
