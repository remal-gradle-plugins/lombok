tasks.named('generateFunctionalJava') { Task task ->
    inputs.files(configurations.librariesToTestCompatibility).withPropertyName('librariesToTestCompatibility')
    classFile(project.calculateBaseJavaPackage(), 'LibrariesToTestCompatibility') {
        it.writePackage()
        it.println("")
        it.writeStaticImport("lombok.AccessLevel", "PRIVATE")
        it.println("")
        it.writeImport("com.google.common.collect.ImmutableMap")
        it.writeImport("java.util.Map")
        it.writeImport("lombok.NoArgsConstructor")
        it.writeImport("lombok.val")
        it.println("")
        it.println("@NoArgsConstructor(access = PRIVATE)")
        it.writeBlock("abstract class ${it.simpleName}") {
            it.println("")
            it.println("private static final Map<String, String> MAPPING = ImmutableMap.<String, String>builder()")
            configurations.librariesToTestCompatibility.resolvedConfiguration
                .getResolvedArtifacts()
                .collect { it.id }
                .collect { it.componentIdentifier }
                .findAll { it instanceof ModuleComponentIdentifier }
                .forEach { ModuleComponentIdentifier id ->
                    it.println("    .put(\"${it.escapeJava("${id.group}:${id.module}")}\", \"${it.escapeJava("${id.group}:${id.module}:${id.version}")}\")")
                }
            it.println("    .build();")

            it.println("")
            it.writeBlock("public static String getLibraryNotation(String id)") {
                it.println("val notation = MAPPING.get(id);")
                it.writeBlock("if (notation == null)") {
                    it.println("throw new IllegalStateException(\"Notation is not registered: \" + id);")
                }
                it.println("return notation;")
            }
        }
    }
}
