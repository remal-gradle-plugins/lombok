generateSources.forSourceSet(sourceSets.functionalTest).java {
    inputs.files(configurations.librariesToTestCompatibility).withPropertyName('librariesToTestCompatibility')

    classFile(project.calculateBaseJavaPackage(), 'LibrariesToTestCompatibility') {
        addStaticImport("lombok.AccessLevel", "PRIVATE")

        addImport("com.google.common.collect.ImmutableMap")
        addImport("java.util.Map")
        addImport("lombok.NoArgsConstructor")
        addImport("lombok.val")

        line("@NoArgsConstructor(access = PRIVATE)")
        suppressWarningsLine("checkstyle:LineLength", "checkstyle:RightCurlyAlone")
        block("abstract class ${simpleName}") {
            line("")
            line("private static final Map<String, String> MAPPING = ImmutableMap.<String, String>builder()")
            indent {
                configurations.librariesToTestCompatibility.resolvedConfiguration
                    .getResolvedArtifacts()
                    .collect { it.id }
                    .collect { it.componentIdentifier }
                    .findAll { it instanceof ModuleComponentIdentifier }
                    .forEach { ModuleComponentIdentifier id ->
                        line(".put(\"${escapeString("${id.group}:${id.module}")}\", \"${escapeString("${id.group}:${id.module}:${id.version}")}\")")
                    }
                line(".build();")
            }

            line("")
            block("public static String getLibraryNotation(String id)") {
                line("val notation = MAPPING.get(id);")
                block("if (notation == null)") {
                    line("throw new IllegalStateException(\"Notation is not registered: \" + id);")
                }
                line("return notation;")
            }
        }
    }
}
