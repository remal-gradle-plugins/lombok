import static com.github.javaparser.ast.Modifier.finalModifier
import static com.github.javaparser.ast.Modifier.publicModifier
import static com.github.javaparser.ast.Modifier.staticModifier

import com.github.javaparser.JavaParser
import com.github.javaparser.ParseProblemException
import com.github.javaparser.ParseResult
import com.github.javaparser.ParserConfiguration
import com.github.javaparser.ast.CompilationUnit
import com.github.javaparser.ast.body.FieldDeclaration
import com.github.javaparser.ast.body.VariableDeclarator
import com.github.javaparser.ast.expr.Expression
import com.github.javaparser.ast.expr.ObjectCreationExpr
import com.github.javaparser.ast.visitor.GenericVisitorAdapter
import javax.inject.Inject
import org.gradle.api.internal.file.FileOperations

class ThisScriptLocation {}

generateSources.forMainSourceSet.java {
    inputs.dir(getClassLocationFile(ThisScriptLocation)).withNormalizer(ClasspathNormalizer).optional()

    Injections injections = project.objects.newInstance(Injections)
    inputs.files(configurations.lombokSources).withPropertyName('lombokSources')

    classFile("${project.calculateBaseJavaPackage()}.config", 'LombokConfigurationKeys') {
        addStaticImport("lombok.AccessLevel", "PRIVATE")

        addImport("java.util.List")
        addImport("org.jspecify.annotations.Nullable")
        addImport("lombok.NoArgsConstructor")

        line("@NoArgsConstructor(access = PRIVATE)")
        suppressWarningsLine("checkstyle:LineLength", "checkstyle:RightCurlyAlone", "checkstyle:SeparatorWrapComma")
        block("public abstract class ${simpleName}") { classContent ->
            line("")
            line("private static final List<LombokConfigurationKey> KEYS = List.of(")

            FileTree lombokSourcesTree = injections.objects.fileCollection().asFileTree
            configurations.lombokSources.files.forEach { File file ->
                if (file.isDirectory()) {
                    lombokSourcesTree += injections.fileOperations.fileTree(file)
                } else {
                    lombokSourcesTree += injections.fileOperations.zipTree(file)
                }
            }

            Set<String> foundLombokConfigProperties = new LinkedHashSet<>()
            lombokSourcesTree.matching { include('lombok/ConfigurationKeys.java') }.visit { FileVisitDetails fileVisitDetails ->
                if (fileVisitDetails.isDirectory()) {
                    return
                }

                ParserConfiguration parserConfiguration = new ParserConfiguration()
                parserConfiguration.languageLevel = ParserConfiguration.LanguageLevel.RAW

                JavaParser javaParser = new JavaParser(parserConfiguration)
                ParseResult<CompilationUnit> parseResult = javaParser.parse(fileVisitDetails.open())
                if (!parseResult.problems.isEmpty()) {
                    throw new ParseProblemException(parseResult.problems)
                }

                CompilationUnit compilationUnit = parseResult.result.get()
                compilationUnit.accept(new GenericVisitorAdapter() {
                    Object visit(FieldDeclaration field, Object arg) {
                        if (![publicModifier(), staticModifier(), finalModifier()].every { field.getModifiers().contains(it) }) {
                            return super.visit(field, arg)
                        }

                        VariableDeclarator variable = field.getVariable(0)
                        if (variable.type.asClassOrInterfaceType().name.asString() != 'ConfigurationKey') {
                            return super.visit(field, arg)
                        }

                        Expression untypedInitializer = variable.initializer.orElse(null)
                        if (!(untypedInitializer instanceof ObjectCreationExpr)) {
                            return super.visit(field, arg)
                        }
                        ObjectCreationExpr initializer = (ObjectCreationExpr) untypedInitializer

                        String configKey = initializer.getArgument(0).asStringLiteralExpr().value
                        if (!foundLombokConfigProperties.add(configKey.toLowerCase())) {
                            throw new GradleException("Duplicate Lombok config key: $configKey")
                        }

                        boolean isDeprecated = field.annotations.any { it.name.identifier == 'Deprecated' }

                        String delim = foundLombokConfigProperties.size() == 1 ? '' : ','

                        classContent.line("    ${delim}LombokConfigurationKey.builder()")
                        classContent.line("        .name(\"${classContent.escapeString(configKey)}\")")
                        classContent.line("        .description(${initializer.getArgument(1)})")
                        if (isDeprecated) {
                            classContent.line("        .deprecated(true)")
                        }
                        classContent.line("        .build()")

                        return super.visit(field, arg)
                    }
                }, null)
            }

            [
                'lombok.addLombokGeneratedAnnotation',
                'lombok.addSuppressWarnings',
                'lombok.noArgsConstructor.extraPrivate',
                'lombok.data.flagUsage',
                'lombok.value.flagUsage',
            ].forEach {
                if (!foundLombokConfigProperties.contains(it.toLowerCase())) {
                    throw new GradleException("Lombok config property is not found: $it")
                }
            }

            line("    );")

            line("")
            line("@Nullable")
            block("public static LombokConfigurationKey findLombokConfigurationKeyFor(String value)") {
                block("for (var key : KEYS)") {
                    block("if (key.getName().equalsIgnoreCase(value))") {
                        line("return key;")
                    }
                }
                line("return null;")
            }

            line("")
            block("public static List<LombokConfigurationKey> getAllLombokConfigurationKeys()") {
                line("return KEYS;")
            }
        }
    }
}

interface Injections {

    @Inject
    ObjectFactory getObjects()

    @Inject
    FileOperations getFileOperations()

}
