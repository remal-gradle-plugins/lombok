import static com.github.javaparser.ast.Modifier.finalModifier
import static com.github.javaparser.ast.Modifier.publicModifier
import static com.github.javaparser.ast.Modifier.staticModifier

import com.github.javaparser.JavaParser
import com.github.javaparser.ParseProblemException
import com.github.javaparser.ParseResult
import com.github.javaparser.ParserConfiguration
import com.github.javaparser.ast.CompilationUnit
import com.github.javaparser.ast.body.FieldDeclaration
import com.github.javaparser.ast.body.VariableDeclarator
import com.github.javaparser.ast.expr.Expression
import com.github.javaparser.ast.expr.ObjectCreationExpr
import com.github.javaparser.ast.visitor.GenericVisitorAdapter

tasks.named('generateJava') { Task task ->
    inputs.files(configurations.lombokSources).withPropertyName('lombokSources')
    classFile("${project.calculateBaseJavaPackage()}.config", 'LombokConfigurationKey') {
        it.writePackage()
        it.println("")
        it.writeImport("lombok.Builder")
        it.writeImport("lombok.NonNull")
        it.writeImport("lombok.Value")
        it.println("")
        it.println("@Value")
        it.println("@Builder")
        it.writeBlock("public class ${it.simpleName}") {
            it.println("@NonNull String name;")
            it.println("@NonNull String description;")
            it.println("boolean deprecated;")
        }
    }
    classFile("${project.calculateBaseJavaPackage()}.config", 'LombokConfigurationKeys') {
        it.writePackage()
        it.println("")
        it.writeStaticImport("lombok.AccessLevel", "PRIVATE")
        it.println("")
        it.writeImport("com.google.common.collect.ImmutableList")
        it.writeImport("java.util.List")
        it.writeImport("javax.annotation.Nullable")
        it.writeImport("lombok.NoArgsConstructor")
        it.writeImport("lombok.val")
        it.println("")
        it.println("@NoArgsConstructor(access = PRIVATE)")
        it.writeSuppressWarnings("checkstyle:LineLength", "checkstyle:RightCurlyAlone")
        it.writeBlock("public abstract class ${it.simpleName}") {
            it.println("")
            it.println("private static final List<LombokConfigurationKey> KEYS = ImmutableList.<LombokConfigurationKey>builder()")

            FileTree lombokSourcesTree = project.files().asFileTree
            configurations.lombokSources.files.forEach { File file ->
                if (file.isDirectory()) {
                    lombokSourcesTree += project.fileTree(file)
                } else {
                    lombokSourcesTree += project.zipTree(file)
                }
            }

            Set<String> foundLombokConfigProperties = new LinkedHashSet<>()
            lombokSourcesTree.matching { include('lombok/ConfigurationKeys.java') }.visit { FileVisitDetails fileVisitDetails ->
                if (fileVisitDetails.isDirectory()) return

                ParserConfiguration parserConfiguration = new ParserConfiguration()
                parserConfiguration.languageLevel = ParserConfiguration.LanguageLevel.RAW

                JavaParser javaParser = new JavaParser(parserConfiguration)
                ParseResult<CompilationUnit> parseResult = javaParser.parse(fileVisitDetails.open())
                if (!parseResult.problems.isEmpty()) throw new ParseProblemException(parseResult.problems)

                CompilationUnit compilationUnit = parseResult.result.get()
                compilationUnit.accept(
                    new GenericVisitorAdapter() {
                        Object visit(FieldDeclaration field, Object arg) {
                            if (![publicModifier(), staticModifier(), finalModifier()].every { field.getModifiers().contains(it) }) return super.visit(field, arg)

                            VariableDeclarator variable = field.getVariable(0)
                            if (variable.type.asClassOrInterfaceType().name.asString() != 'ConfigurationKey') return super.visit(field, arg)

                            Expression untypedInitializer = variable.initializer.orElse(null)
                            if (!(untypedInitializer instanceof ObjectCreationExpr)) return super.visit(field, arg)
                            ObjectCreationExpr initializer = (ObjectCreationExpr) untypedInitializer

                            String configKey = initializer.getArgument(0).asStringLiteralExpr().value
                            if (!foundLombokConfigProperties.add(configKey.toLowerCase())) throw new GradleException("Dublicate Lombok config key: $configKey")

                            boolean isDeprecated = field.annotations.any { it.name.identifier == 'Deprecated' }

                            it.println("    .add(LombokConfigurationKey.builder()")
                            it.println("        .name(\"${it.escapeJava(configKey)}\")")
                            it.println("        .description(${initializer.getArgument(1)})")
                            if (isDeprecated) {
                                it.println("        .deprecated(true)")
                            }
                            it.println("        .build()")
                            it.println("    )")

                            return super.visit(field, arg)
                        }
                    }, null
                )
            }

            [
                'lombok.addLombokGeneratedAnnotation',
                'lombok.addSuppressWarnings',
                'lombok.noArgsConstructor.extraPrivate',
                'lombok.data.flagUsage',
                'lombok.value.flagUsage',
            ].forEach {
                if (!foundLombokConfigProperties.contains(it.toLowerCase())) throw new GradleException("Lombok config property is not found: $it")
            }

            it.println("    .build();")

            it.println("")
            it.println("@Nullable")
            it.writeBlock("public static LombokConfigurationKey findLombokConfigurationKeyFor(String value)") {
                it.writeBlock("for (val key : KEYS)") {
                    it.writeBlock("if (key.getName().equalsIgnoreCase(value))") {
                        it.println("return key;")
                    }
                }
                it.println("return null;")
            }

            it.println("")
            it.writeBlock("public static List<LombokConfigurationKey> getAllLombokConfigurationKeys()") {
                it.println("return KEYS;")
            }
        }
    }
}
